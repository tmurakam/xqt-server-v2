<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" >

<article lang="ja">
  <articleinfo>
    <title>X/Qt-2 開発者向け HOWTO</title>
    <author lang="ja">
      <surname>村上</surname>
      <firstname>卓弥</firstname>
      <affiliation>
	<address>
      <email>tmurakam at users.sourceforge.jp</email>
     </address>
      </affiliation>
    </author>

    <pubdate>23 October 2004</pubdate>
    
    <revhistory>
      <revision>
	<revnumber>1.0</revnumber>
	<date>2004-10-23</date>
	<revremark>Initial release</revremark>
      </revision>
    </revhistory>

    <abstract>
      <para>
このドキュメントは、X/Qt-2 の開発者向け手引きです。
</para>
    </abstract>
  </articleinfo>

  <sect1 id="intro">
    <title>はじめに</title>
    <para>この文書は、X/Qt-2 の開発者向けの手引きです。この文書では、クロス開発環境のセットアップ、
X/Qt のソースの取得とビルド手順、そして新たなパッケージの追加手順について述べています。</para>
    <para>筆者はセルフコンパイル環境を持っていないので、この文書では Zaurus 上でのセルフコンパイル環境構築については触れていません。</para>
  </sect1>

  <sect1 id="presetup">
    <title>必要環境</title>
    <para>Linux をインストールした PC が必要です。ディストリビューションは基本的には何でもよいはずですが、
Fedora だとたぶん glibc-locale がうまくビルドできないと思います。</para>
    <para>ちなみに筆者が使用しているのは <ulink url="http://www.whiteboxlinux.org/">White Box Enterprise Linux 3.0</ulink> です。</para>
    <para>また、開発系のツール/ライブラリを入れておく必要があります。
make や gcc は当然として、autoconf / automake / libtool などが必要です。
あとビルドスクリプトが ruby で記述されている関係で、ruby も必要です。
開発ライブラリは、X や GTK+ 関連のものは一通りいれておくようにしてください。</para>
    <para>なお、X/Qt-2 のフルビルドには、かなりディスク容量が必要です。
('04/10月時点では、2GB 程度のディスク容量が必要)</para>
  </sect1>

  <sect1 id="setup">
    <title>開発環境のセットアップ</title>

    <sect2>
      <title>クロス開発ツールの入手とインストール</title>

      <para>基本的に、SHARP のサイトで公開されている「Qtopia開発チュートリアル」と同じ環境が必要になります。
クロスコンパイラや基本ライブラリ/ヘッダなどを<ulink url="http://developer.ezaurus.com">Zaurus 宝箱 Pro</ulink>
から入手してください。(→国内向け SLシリーズザウルス→Linux関連開発ツールにあります)</para>

      <para>以下の４つのファイルが必要です。</para>
      <itemizedlist>
	  <listitem><para>クロスコンパイラ (gcc)</para></listitem>
	  <listitem><para>ライブラリ (glibc)</para></listitem>
	  <listitem><para>ヘッダファイル</para></listitem>
	  <listitem><para>ユーティリティ</para></listitem>
	</itemizedlist>
      <para>tmake はとりあえず X/Qt-2 の開発では不要です。</para>
      <para>全部 RPM ファイルになっているので、<command>rpm -Uvh <replaceable>ファイル名</replaceable></command> でインストールしてください。</para>
      <note>
	<para>Debian の場合は alien を使う必要があるでしょう。</para>
      </note>
    </sect2>

    <sect2>
      <title>Qtopia のインストール</title>
      <para>X/Qt-2 サーバをビルドするために、Qtopia SDK が必要になります。
      Zaurus に入っているのは Qtopia 1.5.0 なので、それに対応したものを入手、インストールしてください。</para>

      <note>
	<para>1.5.0 のフリー版はもう Trolltech のサイトに置いてないので以下より入手してください。</para>
	<para><ulink url="http://xqt.sourceforge.jp/bin/">http://xqt.sourceforge.jp/bin/</ulink></para>
      </note>
    </sect2>

    <sect2>
      <title>シンボリックリンクを張る</title>
      <para>以下のようにして /opt/QtPalmtop のシンボリックリンクを張っておきます。
こうすると、Zaurus と prefix を一致させることができ、何かと都合がよいです。</para>
      <programlisting>
<command># ln -s /opt/Embedix/tools/arm-linux /opt/QtPalmtop</command>
</programlisting>

      <para>ついでに、以下のシンボリックリンクも張っておきます。これは Emacs をビルドするときに必要です。</para>
      <programlisting>
<command># ln -s arm-linux /opt/Embedix/tools/armlinux</command>
</programlisting>
    </sect2>

    <sect2>
      <title>ターゲットディレクトリを書き込み可能にする</title>
      <para>ビルド中にライブラリやヘッダをインストールするので、ターゲットディレクトリのオーナを
変更して、書き込み可能にしておきます。</para>
      <programlisting>
<command># chown -R <replaceable>username</replaceable> /opt/Embedix/tools/arm-linux</command>
</programlisting>
      <tip>
	<para>もし書き込み可能にしたくない場合は、sudo を使ってインストールすることも可能です。
この場合は、<filename>script/config.def</filename> ファイルの先頭あたりを修正し、sudo を使えるように
しておいてください。</para></tip>
    </sect2>
  </sect1>

  <sect1 id="buildxqt">
    <title>X/Qt-2 のビルド</title>
    <para>ここでは、X/Qt-2 のビルドを行います。</para>

    <sect2>
      <title>X/Qt-2 のビルドの必要性</title>
      <para>X/Qt-2 のビルドには、２つの意味があります。一つは、X/Qt-2 の配布物、すわなち ipkg ファイルの生成です。
ここで生成した ipkg ファイルは、そのままZaurus にインストールして使用することが出来ます。</para>
      <para>もう一つは、開発ライブラリ/ヘッダのインストールです。X/Qt-2 で動作するアプリケーションをビルドする場合、X や GTK+ のヘッダファイルやライブラリが必要になります。これらは、SHARP が提供する開発ライブラリには含まれていませんので、自分でビルドしなければなりません。</para>

      <para>X/Qt-2 のビルドにおいてインストールされるライブラリには、主に以下のものがあります。
これらのライブラリは、さまざまなアプリケーションのビルド時によく必要になるものばかりです。</para>

      <itemizedlist>
	<listitem><para>XFree86</para></listitem>
	<listitem><para>glibc</para></listitem>
	<listitem><para>ncurses</para></listitem>
	<listitem><para>zlib</para></listitem>
	<listitem><para>libjpeg</para></listitem>
	<listitem><para>libpng</para></listitem>
	<listitem><para>libungif</para></listitem>
	<listitem><para>libtiff</para></listitem>
	<listitem><para>freetype</para></listitem>
	<listitem><para>expat</para></listitem>
	<listitem><para>fontconfig</para></listitem>
	<listitem><para>GLib</para></listitem>
	<listitem><para>GTK+</para></listitem>
	<listitem><para>OpenSSL</para></listitem>
      </itemizedlist>

      <note>
	<para>GTK+-2 系のパッケージ(Glib-2, ATK, Pango, GTK+-2)は、現在準備中です。</para>
      </note>
    </sect2>

    <sect2>
      <title>ソースの取り出し</title>
      <para>X/Qt-2 のソースコードを CVS を使って取り出します。以下のようにしてください。</para>
      <programlisting>
 $ export CVSROOT=:pserver:anonymous@cvs.sourceforge.jp:/cvsroot/xqt
 $ cvs login
   [パスワードは空でよい]
 $ cvs checkout xqt2
</programlisting>
    </sect2>

    <sect2>
      <title>wget の設定</title>
      <para>X/Qt-2 のビルドスクリプトは、ビルド中にソースを wget を使ってダウンロードするようになっています。
Proxy を使う場合は、wgetrc ファイルに設定を行っておくか、http_proxy や ftp_proxy 環境変数を設定しておいてください。
</para>
    </sect2>

    <sect2>
      <title>フルビルド</title>
      <para>X/Qt-2 のフルビルドを行います。フルビルドを行うことにより、ipkg の生成と、開発ライブラリ/ヘッダのインストールが行われます。</para>
      <programlisting>
 $ cd xqt2
 $ ./build DevWorld
</programlisting>
      
      <para>ビルドされたパッケージは <filename class="directory">ipkg</filename> ディレクトリに入ります。
また、開発用ライブラリパッケージが <filename class="directory">devpkg</filename>に生成され、<filename class="directory">/opt/Embedix/tools/arm-linux</filename> 以下にインストールされます。
</para>
      <para>フルビルドを行うと、<filename>dirlist</filename>ファイルに指定した順番でパッケージのビルドが行われます。各パッケージのビルドにおいては、以下の処理が順番に実行されるようになっています。</para>
      <orderedlist>
	<listitem><para>ソースファイルのダウンロード</para></listitem>
	<listitem><para>ソースファイルの展開</para></listitem>
	<listitem><para>パッチの適用</para></listitem>
	<listitem><para>configure と make の実行</para></listitem>
	<listitem><para>make install の実行</para></listitem>
	<listitem><para>ipkg の生成</para></listitem>
	<listitem><para>開発ライブラリパッケージの生成</para></listitem>
	<listitem><para>開発ライブラリパッケージのインストール</para></listitem>
      </orderedlist>
    </sect2>

    <sect2>
      <title id="build-each">個別ビルド</title>
      <para>フルビルドを行った場合、<filename>dirlist</filename> に指定した順序ですべてのパッケージがビルドされますが、パッケージを個別にビルドすることも可能です。</para>
      <para>個別ビルドを行う場合は、各パッケージのディレクトリに <command>chdir</command>して、make を実行します。make のターゲットには以下のものが指定できます。</para>

      <itemizedlist>
	<listitem><para>source : ソースの取得と展開</para></listitem>
	<listitem><para>build : ビルド(configure / make)</para></listitem>
	<listitem><para>install : 仮想インストール</para></listitem>
	<listitem><para>ipkg : ipkg の生成</para></listitem>
	<listitem><para>devpkg : 開発パッケージの生成</para></listitem>
	<listitem><para>install-devpkg : 開発パッケージのインストール</para></listitem>
	<listitem><para>World : source/build/install/ipkg までを実行</para></listitem>
	<listitem><para>DevWorld : World に加え、devpkg/install-devpkg まで実行</para></listitem>
	<listitem><para>cleanup : ビルドディレクトリ/仮想インストールディレクトリを削除する</para></listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="addpkg">
    <title>パッケージの追加手順</title>
    <para>この節では、独自パッケージを追加する手順について説明します。</para>
    <sect2>
      <title>パッケージディレクトリを作成する</title>
      <para>まず最初に、パッケージディレクトリを作成します。</para>
      <para>X/Qt-2 では、パッケージ毎にディレクトリを作成しています。パッケージの種別毎に、以下のようなディレクトリがありますので、適宜これらの下にディレクトリを作成してください。</para>
      <itemizedlist>
	<listitem><para>apps: アプリケーション</para></listitem>
	<listitem><para>net: ネットワーキング</para></listitem>
	<listitem><para>fonts: フォント</para></listitem>
	<listitem><para>wm: ウィンドウマネージャ</para></listitem>
	<listitem><para>im: インプットメソッド</para></listitem>
	<listitem><para>libs: ライブラリ</para></listitem>
	<listitem><para>sys: システム</para></listitem>
      </itemizedlist>
    </sect2>

    <sect2>
      <title>pkgdef ファイルの作成</title>
      <para>pkgdef ファイルを作成します。</para>
      <para>pkgdef ファイルは、RPM の spec ファイルのようなもので、パッケージの取得方法や、ビルド手順、ipkg の生成手順などが記載されています。</para>
      <para>以下は、Glib の pkgdef ファイルです。</para>
      <programlisting>
#
# Glib 1.2
#

%site
ftp://ftp.gtk.org/pub/gtk/v1.2

%source
glib-1.2.10.tar.gz
local:glib-1.2.10-cross.patch;patch=1

%define builddir        glib-1.2.10

%prep
rm acinclude.m4
aclocal
libtoolize --force
automake --copy --add-missing
autoconf

%build
./configure %{config_opts} --enable-shared --disable-static
make

%install
make %{install_opts} install

%define devpkg  glib

%files
%{prefix}/lib/libgmodule*
%{prefix}/lib/libgthread*

%excludes
*.la
*.a

%strip
*.so*

%control
Package: glib-additional
Priority: optional
Section: libs
Maintainer: Takuya Murakami &lt;tmurakam@mtd.biglobe.ne.jp&gt;
Architecture: arm
Version: 1.2.10-2
Depends:
License: LGPL
Description: glib additional libraries
  libgmodule.so and libgthread.so
</programlisting>
      <para>このファイルには、以下の内容が記述されています。</para>
      <itemizedlist>
	<listitem><para>%site には、ソースパッケージをダウンロードするサイトの URL を記載します</para></listitem>
	<listitem><para>%source には、ソースパッケージのファイル名を記載します。
通常は、%site で指定したサイトからファイルがダウンロードされます。</para>

<para>先頭が local: で始まっている場合は、ローカルファイルを使用します。また、末尾が ;patch=n と記述されている場合は、このファイルをパッチファイルと見なして自動的にパッチを適用します。n の値は patch コマンドの -p オプションに渡される値です。
</para></listitem>
	<listitem><para>%define builddir には、ビルドを行うディレクトリを指定します。</para></listitem>
	<listitem><para>%prep には、ソース展開後に行う処理を記述します。</para></listitem>
	<listitem><para>%build には、ビルドスクリプトを記述します。</para></listitem>
	<listitem><para>%install には、仮想インストール処理スクリプトを記述します。</para></listitem>
	<listitem><para>%define devpkg には、開発パッケージ名（のプレフィクス）を指定します。</para></listitem>
	<listitem><para>%files には、ipkg に含めるファイル一覧を列挙します。</para></listitem>
	<listitem><para>%excludes には、ipkg に含めないファイルパターンを列挙します。</para></listitem>
	<listitem><para>%strip には、ipkg 生成前に strip を行うファイルパターンを列挙します。</para></listitem>
	<listitem><para>%control には、ipkg の control ファイルを記述します。</para></listitem>
      </itemizedlist>

      <para>ファイル中に %{...} という記述がありますが、これは %define で定義されたシンボルを置換する役割があります。たとえば、<command>%define foo bar</command> と定義しておくと、以後 %{foo} は bar に置換されます。
</para>
      <para>%{config_opts} や %{install_opts} は定義済みのシンボルで、これらは <filename>script/config.def</filename>で設定されています。</para>

      <para>上記サンプルには入っていませんが、%preinst, %postinst, %postrm, %conffiles を使うと %control と同様に ipkg の制御ファイルを設定できます。ipkg の詳細は、<ulink url="http://zaurus-ja.sourceforge.jp/ipkg.html">ipkg を作るには</ulink>が参考になります。</para>

    </sect2>

    <sect2>
      <title>Makefile の作成</title>
      <para>Makefile を作成します。Glib の Makefile の例を示します。</para>
      <programlisting>
TOPDIR = ../..
include $(TOPDIR)/script/common.mk
</programlisting>
      <para>TOPDIR を指定して、common.mk を include するだけなので、非常に単純です。</para>
    </sect2>

    <sect2>
      <title>ビルドを行う</title>
      <para>ビルド手順は、<link linkend="build-each" endterm="build-each"/>と同じです。</para>
      <programlisting><command> $ make DevWorld</command></programlisting>
      <para>フルビルド時に全自動でビルドされるようにするには、dirlist ファイルにディレクトリを追加しておきます。</para>
    </sect2>

    <sect2>
      <title>X/Qt-2 本家にフィードバックするには</title>
      <para>作成したパッケージを X/Qt-2 本家に入れたい場合は、pkgdef ファイルを管理者まで e-mail で送ってください。管理者側で動作を確認し、パッケージを取り込みます。</para>
    </sect2>
  </sect1>

  <appendix>
    <title>Copyrights</title>
    <para>Copyright (c) 2004 Takuya Murakami</para>
    <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.1
      or any later version published by the Free Software Foundation;
      with no Invariant Sections, with no Front-Cover Texts, and with no Back-Cover Texts.
     A copy of the license is available at
     <ulink url="http://www.gnu.org/copyleft/fdl.html">
     http://www.gnu.org/copyleft/fdl.html</ulink>.
</para>
  </appendix>
</article>

