#!/usr/bin/ruby

# Copyright (C) 2004 Takuya Murakami <tmurakam@mtd.biglobe.ne.jp>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

$debug = false

scriptdir = File.expand_path(File.dirname($0))
topdir    = File.expand_path(scriptdir + "/..")
distfiledir = topdir + "/distfile"
devpkgdir   = topdir + "/devpkg"
ipkgdir     = topdir + "/ipkg"
destdir = File.expand_path("./dest")

$ipkg_build = File.expand_path(scriptdir + "/ipkg-build")

$LOAD_PATH.push(scriptdir + "/lib")
require "pkg"

if (ARGV.size < 1)
    STDERR.puts "usage: #{$0} <command> <pkgdef file>..."
    exit 1
end

cmd = ARGV.shift
cmds = []
if (cmd == "World")
    cmds = ["cleanup", "source", "build", "install", "ipkg"]
elsif (cmd == "DevWorld")
    cmds = ["cleanup", "source", "build", "install", "devpkg", "install-devpkg", "ipkg"]
else
    cmds = [cmd]
end

deffiles = ARGV
if (deffiles.size == 0)
    if (FileTest.exist?("pkgdef.list"))
	IO.readlines("pkgdef.list").each do |line|
	    line.chop!
	    next if (line =~ /^#/ || line =~ /^\s*$/)
	    deffiles.push(line)
	end
    else
	deffiles = ["pkgdef"]
    end
end

pkgs = Array.new

deffiles.each do |file|

    # パッケージ定義を読み込む
    pkg = Pkgdef.new
    pkgs.push(pkg)

    pkg.SetDefine("destdir", destdir)
    pkg.SetDefine("scriptdir", scriptdir)
    pkg.SetDefine("ipkgdir", ipkgdir)
    pkg.SetDefine("distfiledir", distfiledir)

    pkg.Load(scriptdir + "/config.def")
    pkg.Load(file)

    # sanity check...
    builddir = pkg.GetDefine("builddir")
    if (builddir == nil)
	pkg.SetDefine("builddir", ".")
    end
end

cmds.each do |cmd|
    pkgs.each do |pkg|
	case cmd
	when "cleanup"
	    builddir = pkg.GetDefine("builddir")
	    if (builddir != nil && builddir != "." && pkg.GetDefine("noclean") == nil)
		system("/bin/rm -rf #{builddir} #{destdir}")
	    end
	when "source"
	    pkg.getSource
	    pkg.ExecSection("prep")
	when "ipkg"
	    pkg.BuildIpkg
	when "devpkg"
	    devpkg = pkg.GetDefine("devpkg")
	    prefix = pkg.GetDefine("prefix")
	    if (devpkg != nil)
		Dir.mkdir(devpkgdir) if (!FileTest.exist?(devpkgdir))
		system("(cd #{destdir}/#{prefix} && tar cvzf #{devpkgdir}/#{devpkg}.tar.gz .)")
	    end
	when "install-devpkg"
	    devpkg = pkg.GetDefine("devpkg")
	    cross_prefix = pkg.GetDefine("cross_prefix")
	    if (devpkg != nil)
		cmd = "sudo tar xvzf #{devpkgdir}/#{devpkg}.tar.gz -C #{cross_prefix}"
		puts cmd
		system(cmd)
	    end
	else
	    pkg.ExecSection(cmd)
	end
    end
end

